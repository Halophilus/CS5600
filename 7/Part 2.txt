A -> B -> C -> A -> B
1. 0.0 A 4 # Initially locks mutex
2. 0.0 A 6 [count -> 1]
3. 0.0 A 7
4. 0.0 A 7.1 # count < 3, so A sleeps and releases the mutex, allowing the other threads to enter the critical section
5. 1.0 B 4 # B wins the race nondeterministically, locks m
6. 1.0 B 6 [count -> 2]
7. 1.0 B 7
8. 1.0 B 7.1 # count < 3, so B sleeps and releases the mutex
9. >1.0 C 4 # C enters meetup after B releases the mutex at some point after timepoint 1.0
10. >1.0 C 6 [count -> 3]
11. >1.0 C 7
12. >1.0 C 7.2 # count > 3, so C wakes up a waiting thread, but does not release the mutex until m.unlock is called
13. >1.0 C 8 [count -> 0]
14. >1.0 C 9 # Releases the mutex
15. >1.0 A 8 [count -> 0] # A wakes up first, also nondeterministic given that there is no guarantee of wake-up order after the wait is released
16. >1.0 A 9 # Releases the mutex
17. >1.0 B 8 [count -> 0]
18 >1.0 B 9 # Releases the mutex

A -> B -> C -> B -> A  
1. 0.0 A 4  
2. 0.0 A 6 [count -> 1]  
3. 0.0 A 7  
4. 0.0 A 7.1  
5. 1.0 B 4  
6. 1.0 B 6 [count -> 2]  
7. 1.0 B 7  
8. 1.0 B 7.1  
9. >1.0 C 4  
10. >1.0 C 6 [count -> 3]  
11. >1.0 C 7  
12. >1.0 C 7.2  
13. >1.0 C 8 [count -> 0]  
14. >1.0 C 9  
15. >1.0 B 8 [count -> 0]  
16. >1.0 B 9  
17. >1.0 A 8 [count -> 0]  
18. >1.0 A 9  

A -> C -> B -> A -> C  
1. 0.0 A 4  
2. 0.0 A 6 [count -> 1]  
3. 0.0 A 7  
4. 0.0 A 7.1  
5. 1.0 C 4  
6. 1.0 C 6 [count -> 2]  
7. 1.0 C 7  
8. 1.0 C 7.1  
9. >1.0 B 4  
10. >1.0 B 6 [count -> 3]  
11. >1.0 B 7  
12. >1.0 B 7.2  
13. >1.0 B 8 [count -> 0]  
14. >1.0 B 9  
15. >1.0 A 8 [count -> 0]  
16. >1.0 A 9  
17. >1.0 C 8 [count -> 0]  
18. >1.0 C 9  

A -> C -> B -> C -> A  
1. 0.0 A 4  
2. 0.0 A 6 [count -> 1]  
3. 0.0 A 7  
4. 0.0 A 7.1  
5. 1.0 C 4  
6. 1.0 C 6 [count -> 2]  
7. 1.0 C 7  
8. 1.0 C 7.1  
9. >1.0 B 4  
10. >1.0 B 6 [count -> 3]  
11. >1.0 B 7  
12. >1.0 B 7.2  
13. >1.0 B 8 [count -> 0]  
14. >1.0 B 9  
15. >1.0 C 8 [count -> 0]  
16. >1.0 C 9  
17. >1.0 A 8 [count -> 0]  
18. >1.0 A 9  
